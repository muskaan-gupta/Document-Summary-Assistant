import { NextResponse } from 'next/server';
import { GoogleGenerativeAI } from '@google/generative-ai';

// File size limit (10MB)
const MAX_FILE_SIZE = 10 * 1024 * 1024;

export async function POST(request) {
  try {
    console.log('=== API Route Started ===');
    
    // Parse the form data
    const formData = await request.formData();
    const file = formData.get('file');
    const summaryLength = formData.get('summaryLength') || 'medium';
    const responseFormat = formData.get('format') || 'json';

    console.log('Form data parsed:', { 
      hasFile: !!file, 
      fileName: file?.name,
      fileSize: file?.size,
      fileType: file?.type,
      summaryLength,
      responseFormat
    });

    // Validate file input
    if (!file) {
      console.error('No file provided');
      return NextResponse.json({ error: 'No file provided' }, { status: 400 });
    }

    if (file.size > MAX_FILE_SIZE) {
      console.error('File too large:', file.size);
      return NextResponse.json({ error: 'File size exceeds 10MB limit' }, { status: 400 });
    }

    // Check supported file types
    const supportedTypes = [
      // Document types
      'application/pdf',
      'text/plain',
      'text/markdown',
      'application/msword',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      // Image types
      'image/jpeg',
      'image/png', 
      'image/gif',
      'image/webp',
      'image/bmp',
      'image/svg+xml',
      // Other text types
      'application/rtf',
      'text/csv',
      'application/json',
      'text/xml',
      'application/xml'
    ];
    
    if (!supportedTypes.includes(file.type)) {
      console.error('Unsupported file type:', file.type);
      return NextResponse.json({ 
        error: `Unsupported file type: ${file.type}. Please upload PDF, Word, text, markdown, image, or other supported document types.` 
      }, { status: 400 });
    }

    console.log('File validated successfully');

    // Handle text files differently - extract text content and send directly
    const isTextFile = file.type.startsWith('text/') || 
                      file.type === 'application/json' || 
                      file.type === 'application/xml';

    let summary;
    
    if (isTextFile) {
      console.log('Processing as text file...');
      const textContent = await file.text();
      console.log('Text content extracted, length:', textContent.length);
      
      if (!textContent.trim()) {
        return NextResponse.json({ error: 'File appears to be empty' }, { status: 400 });
      }
      
      summary = await generateSummaryFromText(textContent, file.name, summaryLength);
    } else {
      console.log('Processing as binary file (PDF/image)...');
      // Convert file to base64 for Google AI
      const arrayBuffer = await file.arrayBuffer();
      const base64Data = Buffer.from(arrayBuffer).toString('base64');
      console.log('File converted to base64, size:', base64Data.length);
      
      summary = await generateSummaryFromFile(base64Data, file.type, file.name, summaryLength);
    }

    console.log('Summary generated successfully');

    // Return response
    if (responseFormat === 'markdown') {
      const markdownResponse = `# Document Summary: ${file.name}

## Summary (${summaryLength})

${summary}

## Document Information

- **File Name**: ${file.name}
- **File Type**: ${file.type}
- **File Size**: ${Math.round(file.size / 1024)} KB
- **Summary Type**: ${summaryLength}

---
*Generated by Document Summary Assistant using Google Gemini AI*`;

      return new Response(markdownResponse, {
        headers: { 'Content-Type': 'text/markdown' }
      });
    } else {
      return NextResponse.json({
        success: true,
        summary: summary,
        fileName: file.name,
        fileSize: file.size,
        fileType: file.type,
        summaryLength: summaryLength
      });
    }

  } catch (error) {
    console.error('=== API Error ===');
    console.error('Error processing file:', error);
    console.error('Error stack:', error.stack);
    
    return NextResponse.json(
      { 
        error: 'Failed to process file', 
        details: error.message,
        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
      },
      { status: 500 }
    );
  }
}

async function generateSummaryFromText(textContent, fileName, summaryLength) {
  try {
    const apiKey = process.env.GOOGLE_GEMINI_API_KEY;
    
    if (!apiKey) {
      throw new Error('Google Gemini API key not configured');
    }

    const genAI = new GoogleGenerativeAI(apiKey);
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

    // Create system prompts based on summary length
    const lengthPrompts = {
      short: `Analyze this text document and provide a concise summary (2-3 sentences), focusing only on the most critical information.`,
      medium: `Analyze this text document and provide a comprehensive summary (1-2 paragraphs) covering the main points, key findings, and important details.`,
      long: `Analyze this text document and provide a detailed summary (3-4 paragraphs) including main points, supporting details, key findings, conclusions, and any important context.`
    };

    const systemPrompt = lengthPrompts[summaryLength] || lengthPrompts.medium;
    const fullPrompt = `${systemPrompt}\n\nDocument content:\n\n${textContent}`;
    
    console.log('Sending text to Google AI for processing...');
    
    const result = await model.generateContent(fullPrompt);
    const response = result.response;
    const summary = response.text();

    console.log('Google AI text processing completed successfully');

    return summary;
  } catch (error) {
    console.error('AI text summary generation error:', error);
    console.error('Error details:', error.response?.data || error.message);
    throw new Error('Failed to generate text summary: ' + error.message);
  }
}

async function generateSummaryFromFile(base64Data, mimeType, fileName, summaryLength) {
  try {
    const apiKey = process.env.GOOGLE_GEMINI_API_KEY;
    
    if (!apiKey) {
      throw new Error('Google Gemini API key not configured');
    }

    const genAI = new GoogleGenerativeAI(apiKey);
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" }); // Use gemini-1.5-flash for file processing

    // Create the file part for Google AI
    const filePart = {
      inlineData: {
        data: base64Data,
        mimeType: mimeType
      }
    };

    // Create system prompts based on summary length and file type
    const isImage = mimeType.startsWith('image/');
    const basePrompt = isImage 
      ? `Analyze this image and provide a detailed description and summary of its contents.`
      : `Analyze this PDF document and provide a comprehensive summary of its contents.`;

    const lengthPrompts = {
      short: `${basePrompt} Keep the summary concise (2-3 sentences), focusing only on the most critical information.`,
      medium: `${basePrompt} Provide a comprehensive summary (1-2 paragraphs) covering the main points, key findings, and important details.`,
      long: `${basePrompt} Provide a detailed summary (3-4 paragraphs) including main points, supporting details, key findings, conclusions, and any important context.`
    };

    const systemPrompt = lengthPrompts[summaryLength] || lengthPrompts.medium;
    
    console.log('Sending file to Google AI for processing...');
    
    // Generate content with both text prompt and file
    const result = await model.generateContent([systemPrompt, filePart]);
    const response = result.response;
    const summary = response.text();

    console.log('Google AI processing completed successfully');

    return summary;
  } catch (error) {
    console.error('AI summary generation error:', error);
    console.error('Error details:', error.response?.data || error.message);
    throw new Error('Failed to generate summary: ' + error.message);
  }
}
